"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from meldapi import utils
from meldapi.models import operations
from typing import Any, Optional

class Schema:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def schema_retrieve(self, request: operations.SchemaRetrieveRequest, security: operations.SchemaRetrieveSecurity) -> operations.SchemaRetrieveResponse:
        r"""OpenApi3 schema for this API. Format can be selected via content negotiation.
        
        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/api/v0.0.1/schema/'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.SchemaRetrieveRequest, request)
        headers['Accept'] = 'application/json;q=1, application/vnd.oai.openapi+json;q=0.8, application/yaml;q=0.5, application/vnd.oai.openapi;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaRetrieveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.schema_retrieve_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/vnd.oai.openapi'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/vnd.oai.openapi+json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.schema_retrieve_200_application_vnd_oai_openapi_plus_json_object = out

        return res

    