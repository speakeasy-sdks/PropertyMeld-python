"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from meldapi import utils
from meldapi.models import operations, shared
from typing import Optional

class Meld:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def meld_list(self, request: operations.MeldListRequest, security: operations.MeldListSecurity) -> operations.MeldListResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/api/v0.0.1/meld/'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.MeldListRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeldListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedMeldSerializerListList])
                res.paginated_meld_serializer_list_list = out

        return res

    
    def meld_manager_files_list(self, request: operations.MeldManagerFilesListRequest, security: operations.MeldManagerFilesListSecurity) -> operations.MeldManagerFilesListResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.MeldManagerFilesListRequest, base_url, '/api/v0.0.1/meld/{id}/manager-files/', request)
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.MeldManagerFilesListRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeldManagerFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPMAPIMeldfileList])
                res.paginated_pm_api_meldfile_list = out

        return res

    
    def meld_retrieve(self, request: operations.MeldRetrieveRequest, security: operations.MeldRetrieveSecurity) -> operations.MeldRetrieveResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.MeldRetrieveRequest, base_url, '/api/v0.0.1/meld/{id}/', request)
        headers = utils.get_headers(request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeldRetrieveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MeldSerializerDetailOutput])
                res.meld_serializer_detail = out

        return res

    
    def meld_tenant_files_list(self, request: operations.MeldTenantFilesListRequest, security: operations.MeldTenantFilesListSecurity) -> operations.MeldTenantFilesListResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.MeldTenantFilesListRequest, base_url, '/api/v0.0.1/meld/{id}/tenant-files/', request)
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.MeldTenantFilesListRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeldTenantFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPmAPITenantMeldList])
                res.paginated_pm_api_tenant_meld_list = out

        return res

    
    def meld_vendor_files_list(self, request: operations.MeldVendorFilesListRequest, security: operations.MeldVendorFilesListSecurity) -> operations.MeldVendorFilesListResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.MeldVendorFilesListRequest, base_url, '/api/v0.0.1/meld/{id}/vendor-files/', request)
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.MeldVendorFilesListRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeldVendorFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPMAPIVendorMeldFileList])
                res.paginated_pm_api_vendor_meld_file_list = out

        return res

    