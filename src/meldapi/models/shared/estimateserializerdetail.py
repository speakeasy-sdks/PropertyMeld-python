"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import estimatestatusenum as shared_estimatestatusenum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from meldapi import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EstimateSerializerDetailOutput:
    
    date_accepted: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_accepted'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    estimate_meld: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimate_meld') }})
    get_vendor_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('get_vendor_email') }})
    get_vendor_invite_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('get_vendor_invite_email') }})
    get_vendor_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('get_vendor_name') }})
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    line_items: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_items') }})
    original_meld: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_meld') }})
    total: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    vendor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor') }})
    approval_requested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval_requested'), 'exclude': lambda f: f is None }})
    days_to_complete: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_to_complete'), 'exclude': lambda f: f is None }})
    days_until_start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_until_start'), 'exclude': lambda f: f is None }})
    deadline: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deadline'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    estimate_status: Optional[shared_estimatestatusenum.EstimateStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimate_status'), 'exclude': lambda f: f is None }})
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    pm_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm_fee'), 'exclude': lambda f: f is None }})
    servicer: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicer'), 'exclude': lambda f: f is None }})
    