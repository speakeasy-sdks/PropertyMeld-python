"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import basebuilding as shared_basebuilding
from ..shared import basefloor as shared_basefloor
from ..shared import meldinvoicelistdisplayaddress as shared_meldinvoicelistdisplayaddress
from ..shared import meldinvoicelistproperty as shared_meldinvoicelistproperty
from dataclasses_json import Undefined, dataclass_json
from meldapi import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class MeldInvoiceListViewUnit:
    building: shared_basebuilding.BaseBuilding = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('building') }})
    display_address: shared_meldinvoicelistdisplayaddress.MeldInvoiceListDisplayAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_address') }})
    floor: shared_basefloor.BaseFloor = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floor') }})
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    prop: shared_meldinvoicelistproperty.MeldInvoiceListProperty = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prop') }})
    apartment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apartment'), 'exclude': lambda f: f is None }})
    department: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('department'), 'exclude': lambda f: f is None }})
    room: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room'), 'exclude': lambda f: f is None }})
    suite: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suite'), 'exclude': lambda f: f is None }})
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    

