"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginatedmeldserializerlistlist as shared_paginatedmeldserializerlistlist
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class MeldListSecurity:
    
    pmo_auth2_authentication: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})
    
class MeldListAckApproval(str, Enum):
    r"""ack_approval"""
    TRUE = 'true'
    FALSE = 'false'

class MeldListCategories(str, Enum):
    r"""categories"""
    FOR_RENT_SIGN = 'FOR_RENT_SIGN'
    EVALUATION = 'EVALUATION'
    TURNOVER = 'TURNOVER'
    APPLIANCES = 'APPLIANCES'
    BLINDS_WINDOW_TREATMENTS = 'BLINDS_WINDOW_TREATMENTS'
    CIRCUIT_BREAKER = 'CIRCUIT_BREAKER'
    CLEANING = 'CLEANING'
    DOORS = 'DOORS'
    DRIVEWAY = 'DRIVEWAY'
    DRYWALL = 'DRYWALL'
    ELECTRICAL = 'ELECTRICAL'
    EXTERIOR = 'EXTERIOR'
    FIREPLACE = 'FIREPLACE'
    FLOORING = 'FLOORING'
    GARAGE_DOOR = 'GARAGE_DOOR'
    GARBAGE_DISPOSAL = 'GARBAGE_DISPOSAL'
    GENERAL = 'GENERAL'
    HARDWARE = 'HARDWARE'
    HVAC = 'HVAC'
    INTERIOR = 'INTERIOR'
    LANDSCAPING = 'LANDSCAPING'
    LOCKS = 'LOCKS'
    OTHER_WORK_CATEGORY = 'OTHER_WORK_CATEGORY'
    PAINTING = 'PAINTING'
    OUTSIDE_WATER_SPIGOT = 'OUTSIDE_WATER_SPIGOT'
    PEST_CONTROL = 'PEST_CONTROL'
    PLUMBING = 'PLUMBING'
    CARPENTRY = 'CARPENTRY'
    POOL = 'POOL'
    ROOFING = 'ROOFING'
    SEWER = 'SEWER'
    SHOWER = 'SHOWER'
    SIDING = 'SIDING'
    SMOKE_DETECTOR_CO_DETECTORS = 'SMOKE_DETECTOR_CO_DETECTORS'
    SOFFIT_FASCIA = 'SOFFIT_FASCIA'
    STAIRS = 'STAIRS'
    TOILET = 'TOILET'
    TOWEL_BARS = 'TOWEL_BARS'
    VIOLATIONS = 'VIOLATIONS'
    WASHER_DRYER = 'WASHER_DRYER'
    WATER_DAMAGE = 'WATER_DAMAGE'
    WATER_HEATER = 'WATER_HEATER'
    WATER_SOFTENER = 'WATER_SOFTENER'
    WINDOWS = 'WINDOWS'

class MeldListDueDateChoice(str, Enum):
    r"""due_date_choice"""
    OVERDUE = 'overdue'
    TODAY = 'today'
    TOMORROW = 'tomorrow'
    WEEK = 'week'

class MeldListEverBeenAssigned(str, Enum):
    r"""ever_been_assigned"""
    TRUE = 'true'
    FALSE = 'false'

class MeldListExp(str, Enum):
    r"""exp"""
    TRUE = 'true'
    FALSE = 'false'

class MeldListHasEstimates(str, Enum):
    r"""has_estimates"""
    FALSE = 'false'
    TRUE = 'true'

class MeldListMaintType(str, Enum):
    r"""maint_type"""
    ONE = '1'
    TWO = '2'

class MeldListMeldinvoice(str, Enum):
    r"""meldinvoice"""
    TRUE = 'true'
    FALSE = 'false'

class MeldListOrderBy(str, Enum):
    r"""Ordering"""
    OWNER_APPROVAL_REQUEST_DATE = 'owner_approval_request_date'
    MINUS_OWNER_APPROVAL_REQUEST_DATE = '-owner_approval_request_date'

class MeldListOwnerApproval(str, Enum):
    r"""owner_approval"""
    OWNER_APPROVAL_NOT_REQUESTED = 'OWNER_APPROVAL_NOT_REQUESTED'
    OWNER_APPROVAL_REQUESTED = 'OWNER_APPROVAL_REQUESTED'
    OWNER_APPROVAL_APPROVED = 'OWNER_APPROVAL_APPROVED'
    OWNER_APPROVAL_NOT_APPROVED = 'OWNER_APPROVAL_NOT_APPROVED'
    OWNER_APPROVAL_REQUESTED_ESTIMATES = 'OWNER_APPROVAL_REQUESTED_ESTIMATES'

class MeldListPriority(str, Enum):
    r"""priority"""
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'

class MeldListProjectAssigned(str, Enum):
    r"""project_assigned"""
    TRUE = 'true'
    FALSE = 'false'

class MeldListRating(str, Enum):
    r"""rating"""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'

class MeldListRecurring(str, Enum):
    r"""recurring"""
    TRUE = 'true'
    FALSE = 'false'

class MeldListReminderChoice(str, Enum):
    r"""reminder_choice"""
    OVERDUE = 'overdue'
    TODAY = 'today'
    TOMORROW = 'tomorrow'
    WEEK = 'week'

class MeldListStatus(str, Enum):
    r"""status"""
    OPEN = 'OPEN'
    MANAGER_CANCELED = 'MANAGER_CANCELED'
    TENANT_CANCELED = 'TENANT_CANCELED'
    PENDING_ESTIMATES = 'PENDING_ESTIMATES'
    PENDING_TENANT_AVAILABILITY = 'PENDING_TENANT_AVAILABILITY'
    PENDING_MORE_VENDOR_AVAILABILITY = 'PENDING_MORE_VENDOR_AVAILABILITY'
    PENDING_MORE_MANAGEMENT_AVAILABILITY = 'PENDING_MORE_MANAGEMENT_AVAILABILITY'
    PENDING_COMPLETION = 'PENDING_COMPLETION'
    COMPLETED = 'COMPLETED'
    VENDOR_COULD_NOT_COMPLETE = 'VENDOR_COULD_NOT_COMPLETE'
    MAINTENANCE_COULD_NOT_COMPLETE = 'MAINTENANCE_COULD_NOT_COMPLETE'
    PENDING_VENDOR = 'PENDING_VENDOR'
    PENDING_ASSIGNMENT = 'PENDING_ASSIGNMENT'

class MeldListTpr(str, Enum):
    r"""tpr"""
    FALSE = 'false'
    TRUE = 'true'


@dataclasses.dataclass
class MeldListRequest:
    
    x_pm_org: int = dataclasses.field(metadata={'header': { 'field_name': 'X-Pm-Org', 'style': 'simple', 'explode': False }})
    r"""The management ID (MID), found in the first number of your URL when logged in:  https://app.propertymeld.com/{MID}/m/123"""
    ack_approval: Optional[MeldListAckApproval] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ack_approval', 'style': 'form', 'explode': True }})
    r"""ack_approval"""
    assigned_to_me: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'assigned_to_me', 'style': 'form', 'explode': True }})
    r"""assigned_to_me"""
    categories: Optional[MeldListCategories] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'categories', 'style': 'form', 'explode': True }})
    r"""categories"""
    comments_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'comments_gte', 'style': 'form', 'explode': True }})
    r"""comments_gte"""
    comments_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'comments_lte', 'style': 'form', 'explode': True }})
    r"""comments_lte"""
    completed_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'completed__gte', 'style': 'form', 'explode': True }})
    r"""completed__gte"""
    completed_interval: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'completed__interval', 'style': 'form', 'explode': True }})
    r"""completed__interval"""
    completed_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'completed__lte', 'style': 'form', 'explode': True }})
    r"""completed__lte"""
    created_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created__gte', 'style': 'form', 'explode': True }})
    r"""created__gte"""
    created_interval: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created__interval', 'style': 'form', 'explode': True }})
    r"""created__interval"""
    created_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created__lte', 'style': 'form', 'explode': True }})
    r"""created__lte"""
    created_offset_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created__offset_lte', 'style': 'form', 'explode': True }})
    r"""created__offset_lte"""
    due_date_choice: Optional[MeldListDueDateChoice] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'due_date_choice', 'style': 'form', 'explode': True }})
    r"""due_date_choice"""
    due_date_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'due_date_gte', 'style': 'form', 'explode': True }})
    r"""due_date_gte"""
    due_date_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'due_date_lte', 'style': 'form', 'explode': True }})
    r"""due_date_lte"""
    ever_been_assigned: Optional[MeldListEverBeenAssigned] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ever_been_assigned', 'style': 'form', 'explode': True }})
    r"""ever_been_assigned"""
    exp: Optional[MeldListExp] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exp', 'style': 'form', 'explode': True }})
    r"""exp"""
    exp_s: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exp_s', 'style': 'form', 'explode': True }})
    r"""exp_s"""
    files_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'files_gte', 'style': 'form', 'explode': True }})
    r"""files_gte"""
    files_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'files_lte', 'style': 'form', 'explode': True }})
    r"""files_lte"""
    has_estimates: Optional[MeldListHasEstimates] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'has_estimates', 'style': 'form', 'explode': True }})
    r"""has_estimates"""
    invoice_s: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'invoice_s', 'style': 'form', 'explode': True }})
    r"""invoice_s"""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results to return per page."""
    maint: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maint', 'style': 'form', 'explode': True }})
    r"""maint"""
    maint_type: Optional[MeldListMaintType] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maint_type', 'style': 'form', 'explode': True }})
    r"""maint_type"""
    marked_complete_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'marked_complete__gte', 'style': 'form', 'explode': True }})
    r"""marked_complete__gte"""
    marked_complete_interval: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'marked_complete__interval', 'style': 'form', 'explode': True }})
    r"""marked_complete__interval"""
    marked_complete_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'marked_complete__lte', 'style': 'form', 'explode': True }})
    r"""marked_complete__lte"""
    meldinvoice: Optional[MeldListMeldinvoice] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'meldinvoice', 'style': 'form', 'explode': True }})
    r"""meldinvoice"""
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The initial index from which to return the results."""
    order_by: Optional[MeldListOrderBy] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})
    r"""Ordering"""
    owner_approval: Optional[MeldListOwnerApproval] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owner_approval', 'style': 'form', 'explode': True }})
    r"""owner_approval"""
    pg: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pg', 'style': 'form', 'explode': True }})
    r"""pg"""
    priority: Optional[MeldListPriority] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'priority', 'style': 'form', 'explode': True }})
    r"""priority"""
    project: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project', 'style': 'form', 'explode': True }})
    r"""project"""
    project_assigned: Optional[MeldListProjectAssigned] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project_assigned', 'style': 'form', 'explode': True }})
    r"""project_assigned"""
    prop: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prop', 'style': 'form', 'explode': True }})
    r"""prop"""
    rating: Optional[MeldListRating] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rating', 'style': 'form', 'explode': True }})
    r"""rating"""
    recurring: Optional[MeldListRecurring] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'recurring', 'style': 'form', 'explode': True }})
    r"""recurring"""
    recurring_meld: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'recurring_meld', 'style': 'form', 'explode': True }})
    r"""recurring_meld"""
    remindees: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'remindees', 'style': 'form', 'explode': True }})
    r"""remindees"""
    reminder_choice: Optional[MeldListReminderChoice] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reminder_choice', 'style': 'form', 'explode': True }})
    r"""reminder_choice"""
    reminder_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reminder_gte', 'style': 'form', 'explode': True }})
    r"""reminder_gte"""
    reminder_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reminder_lte', 'style': 'form', 'explode': True }})
    r"""reminder_lte"""
    scheduled_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scheduled__gte', 'style': 'form', 'explode': True }})
    r"""scheduled__gte"""
    scheduled_interval: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scheduled__interval', 'style': 'form', 'explode': True }})
    r"""scheduled__interval"""
    scheduled_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scheduled__lte', 'style': 'form', 'explode': True }})
    r"""scheduled__lte"""
    scheduling: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scheduling', 'style': 'form', 'explode': True }})
    r"""scheduling"""
    status: Optional[MeldListStatus] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""status"""
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': True }})
    r"""tags"""
    tags_ex: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags_ex', 'style': 'form', 'explode': True }})
    r"""tags_ex"""
    tpr: Optional[MeldListTpr] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tpr', 'style': 'form', 'explode': True }})
    r"""tpr"""
    unit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unit', 'style': 'form', 'explode': True }})
    r"""unit"""
    updated_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated__gte', 'style': 'form', 'explode': True }})
    r"""updated__gte"""
    updated_interval: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated__interval', 'style': 'form', 'explode': True }})
    r"""updated__interval"""
    updated_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated__lte', 'style': 'form', 'explode': True }})
    r"""updated__lte"""
    updated_offset_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated__offset_lte', 'style': 'form', 'explode': True }})
    r"""updated__offset_lte"""
    vendor_scheduled_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vendor_scheduled__gte', 'style': 'form', 'explode': True }})
    r"""vendor_scheduled__gte"""
    vendor_scheduled_interval: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vendor_scheduled__interval', 'style': 'form', 'explode': True }})
    r"""vendor_scheduled__interval"""
    vendor_scheduled_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vendor_scheduled__lte', 'style': 'form', 'explode': True }})
    r"""vendor_scheduled__lte"""
    wl_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'wl__gte', 'style': 'form', 'explode': True }})
    r"""wl__gte"""
    wl_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'wl__lte', 'style': 'form', 'explode': True }})
    r"""wl__lte"""
    

@dataclasses.dataclass
class MeldListResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    paginated_meld_serializer_list_list: Optional[shared_paginatedmeldserializerlistlist.PaginatedMeldSerializerListList] = dataclasses.field(default=None)
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    