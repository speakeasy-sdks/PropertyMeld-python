"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .building import Building
from .check_token import CheckToken
from .estimates import Estimates
from .expenditure import Expenditure
from .floor import Floor
from .invoice import Invoice
from .management_agent import ManagementAgent
from .manager_file import ManagerFile
from .meld import Meld
from .owner import Owner
from .ping import Ping
from .project import Project
from .property import Property
from .property_group import PropertyGroup
from .resident import Resident
from .resident_file import ResidentFile
from .schema import Schema
from .sdkconfiguration import SDKConfiguration
from .unit import Unit
from .vendor import Vendor
from .vendor_file import VendorFile
from .vendor_invite import VendorInvite
from .work_log import WorkLog
from meldapi import utils

class MeldAPI:
    r"""Property Meld API: An API to access data from your Property Meld Account."""
    building: Building
    check_token: CheckToken
    estimates: Estimates
    expenditure: Expenditure
    floor: Floor
    invoice: Invoice
    management_agent: ManagementAgent
    manager_file: ManagerFile
    meld: Meld
    owner: Owner
    ping: Ping
    project: Project
    property: Property
    property_group: PropertyGroup
    resident: Resident
    resident_file: ResidentFile
    schema: Schema
    unit: Unit
    vendor: Vendor
    vendor_file: VendorFile
    vendor_invite: VendorInvite
    work_log: WorkLog

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = client
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.building = Building(self.sdk_configuration)
        self.check_token = CheckToken(self.sdk_configuration)
        self.estimates = Estimates(self.sdk_configuration)
        self.expenditure = Expenditure(self.sdk_configuration)
        self.floor = Floor(self.sdk_configuration)
        self.invoice = Invoice(self.sdk_configuration)
        self.management_agent = ManagementAgent(self.sdk_configuration)
        self.manager_file = ManagerFile(self.sdk_configuration)
        self.meld = Meld(self.sdk_configuration)
        self.owner = Owner(self.sdk_configuration)
        self.ping = Ping(self.sdk_configuration)
        self.project = Project(self.sdk_configuration)
        self.property = Property(self.sdk_configuration)
        self.property_group = PropertyGroup(self.sdk_configuration)
        self.resident = Resident(self.sdk_configuration)
        self.resident_file = ResidentFile(self.sdk_configuration)
        self.schema = Schema(self.sdk_configuration)
        self.unit = Unit(self.sdk_configuration)
        self.vendor = Vendor(self.sdk_configuration)
        self.vendor_file = VendorFile(self.sdk_configuration)
        self.vendor_invite = VendorInvite(self.sdk_configuration)
        self.work_log = WorkLog(self.sdk_configuration)
    